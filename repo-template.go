package main

import (
	"io"
	"os"
	"text/template"
)

var repoTmpl = template.Must(template.New("repoTmpl").Parse(
	`// Code generated by go-gen-sql. DO NOT EDIT.

package {{.Pkg}}

import (
	"database/sql"
	"errors"
)

var ErrorUnimplmented = errors.New("method not implemented")

type {{.Model}}Repo struct {
	db *sql.DB
}

func (r *{{.Model}}Repo) Create(*{{.Model}}) error {
	return ErrorUnimplmented
}

func (r *{{.Model}}Repo) Update(*{{.Model}}) error {
	return ErrorUnimplmented
}

func (r *{{.Model}}Repo) Delete(*{{.Model}}) error {
	return ErrorUnimplmented
}

func (r *{{.Model}}Repo) First(q string, args ...interface{}) (*{{.Model}}, error) {
	return nil, ErrorUnimplmented
}

func (r *{{.Model}}Repo) All(q string, args ...interface{}) ([]*{{.Model}}, error) {
	return nil, ErrorUnimplmented
}

func (r *{{.Model}}Repo) Count(q string, args ...interface{}) (uint64, error) {
	return 0, ErrorUnimplmented
}

func New{{.Model}}Repo(db *sql.DB) *{{.Model}}Repo {
	return &{{.Model}}Repo{
		db: db,
	}
}
`))

func writeRepoToStream(wr io.Writer, model, pkg string) error {
	return repoTmpl.Execute(wr, struct {
		Model, Pkg string
	}{
		Model: model,
		Pkg:   pkg,
	})
}

func writeRepoToFile(filename, model, pkg string) (err error) {
	f, err := os.Create(filename)
	if err != nil {
		return
	}
	defer func() {
		err = f.Close()
	}()
	err = writeRepoToStream(f, model, pkg)
	return
}
